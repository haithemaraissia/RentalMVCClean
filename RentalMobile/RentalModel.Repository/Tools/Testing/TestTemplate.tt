<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace=" System.IO" #>


<#@ assembly name="System" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ output extension=".cs" #>

<#
    //string solutionsPath = this.Host.ResolveAssemblyReference("$(SolutionDir)");//Gives you the location of MySolution.sln
    //var ModelDirectoryPath = solutionsPath + "Models"; //Note - VS projects usually have a subdir with the same name as the sln, hence the repetition for MyDAL
    WriteLine("using System;");
    WriteLine("using RentalMobile.Models;");
    WriteLine("using RentalModel.Repository.Generic.Repositories.Base;");
    WriteLine("");
    WriteLine("namespace RentalModel.Repository.Generic.UnitofWork;");
     WriteLine("");
    WriteLine("     public interface IGenericUnitofWork :IDisposable");
            WriteLine("{");
            
    //IGenericRepository<Unit> UnitRepository { get; }

    

    var x= 1;
    //Write (x.ToString());

    foreach ( var FileName in  GetAllFiles())
    {
        //WriteLine(string.Format(" IGenericRepository<{0}> {0}Repository { get; }", FileName));

        Write(string.Format("     IGenericRepository<{0}>", FileName));
        Write(string.Format(@" {0}Repository ", FileName));
        WriteLine(@"{get;}");

    }

    //PushIndent("  ");
    //ClearIndent();

    WriteLine("}");
#>

//<#=        x #>
//<#=        GetAllFiles() #>


<#+
   private List<string> GetAllFiles()
        {
            var mylist = new List<string>();
            DirectoryInfo dinfo = new DirectoryInfo(GetModelPath());
            //FileInfo[] Files = dinfo.GetFiles("*.cs");
            //foreach (var file in Files)
            //{
//
                //mylist.Add(file.Name);
            //}
//
            //return mylist;

            List<string> files = (dinfo.GetFiles("*.cs").Select(fileName => Path.GetFileNameWithoutExtension(fileName.ToString()))).ToList();

            //foreach( var filename in files)
                //{
//
//
                //}
        return files;
        }
#>

<#+ 
    private string GetModelPath()
    {
        FileInfo fi = new FileInfo(Host.TemplateFile);
        string currentFolder = fi.Directory.FullName;
        string parentFolder= fi.Directory.Parent.FullName;
        string ModelFolder= Path.Combine(parentFolder,"Models");
        if ( Directory.Exists(ModelFolder)) {
            return ModelFolder;
        }
        Error("Could not find the Model Folder");
        return string.Empty;
    }
#>
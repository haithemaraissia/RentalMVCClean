<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="C:\Users\haraissia\Desktop\Latest\RentalMobile\RentalMobile.Model\bin\Debug\RentalMobile.Model.dll" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace=" System.IO" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ include file="$(ProjectDir)\Tools\MultipleOutputHelper.ttinclude.tt"#>
<#@ include file="$(ProjectDir)\Tools\ClassFinder.tt"#>


<#@ output extension=".cs" #>

<#
   // Project prj = GetProject();
   // string fileName = "$(ProjectDir)bin\\debug\\" + prj.Properties.Item("OutputFileName").Value;
   // string path = Host.ResolveAssemblyReference(fileName);
   // Assembly asm = Assembly.LoadFrom(path);

    // ....
#> 

<#
	Start(
		typeof(RentalMobile.Model.Models), 
		new Predicate<string>((s) => s.Length >=0)
		);
#>

<#+
private void WriteClassStart(string className, string classAccess, string classNamespace)
{
#>
namespace <#= classNamespace #>
{
	<#= classAccess #> partial class <#= className #>
	{
<#+
}

private void WriteClassEnd(string className, string classAccess, string classNamespace)
{
#>

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string name)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged.Invoke(this, new PropertyChangedEventArgs(name));
			}
		}
	}
}
<#+
}

private void WriteProperty(string fieldName, string propType)
{
		char[] tmp = fieldName.TrimStart('_').ToCharArray();
		tmp.SetValue(char.ToUpper(tmp[0]),0);

		string propName = new string(tmp);
#>
		public <#= propType #> <#= propName #>
		{
			get { return <#= fieldName #>; }
			set { <#= fieldName #> = value; OnPropertyChanged("<#= propName #>"); }
		}
<#+
}
#>
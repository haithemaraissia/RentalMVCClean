<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace=" System.IO" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ output extension=".cs" #>
using System;
using System.Data.Entity;
using RentalMobile.Model.Models;
using RentalMobile.Models;
using RentalModel.Repository.Generic.Repositories.Base;

namespace RentalModel.Repository.Generic.UnitofWork
{
    public partial class UnitofWork : IGenericUnitofWork
    {
        public  DbContext Context;

        public UnitofWork()
        {
            Context = new RentalContext();
        }

        public UnitofWork(DbContext context)
        {
            Context = context;
        }
 <#   foreach ( var FileName in  GetAllFiles())
    { #>

        private IGenericRepository<<#=FileName#>> _<#=FileName#>Repository;

        public IGenericRepository<<#=FileName#>> <#=FileName#>Repository
        {
            get { return  _<#=FileName#>Repository ?? ( _<#=FileName#>Repository = new GenericRepository<<#=FileName#>>(Context)); }
            set {  _<#=FileName#>Repository = value; }
        }

    <# } #>
        public void Save()
        {
            Context.SaveChanges();
        }

        private bool _disposed;



        public void Dispose(bool disposing)
        {
            if (!_disposed)
            {
                if (disposing)
                {
                    Context.Dispose();
                }
            }
            _disposed = true;
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
    }     
}

<#+
   private List<string> GetAllFiles()
        {
            DirectoryInfo dinfo = new DirectoryInfo(GetModelPath());
            List<string> files = (dinfo.GetFiles("*.cs").Select(fileName => Path.GetFileNameWithoutExtension(fileName.ToString()))).ToList();
           var excludedclasses =
                new List<string>
                {
                    "RentalContextGenerator.Context1",
                    "RentalContextGenerator",
                    "RentalContextGenerator1",
                    "RentalModel.Designer",
                    "RentalModel1.Designer",
                    "sysdiagram"
                };
            var mylist  = files.Except(excludedclasses);
            return mylist.ToList();
        }
#>

<#+ 
    private string GetModelPath()
    {
        FileInfo fi = new FileInfo(Host.TemplateFile);
        string currentUnitofWorkFolder = fi.Directory.FullName;
        string currentRepositorySolutionFolder = fi.Directory.Parent.Parent.FullName;
        string ApplicatonSolutionFolder= fi.Directory.Parent.Parent.Parent.FullName;


        string parentFolder= fi.Directory.Parent.FullName;
        string ModelFolder= Path.Combine(ApplicatonSolutionFolder,@"RentalMobile.Model\Models");
        if ( Directory.Exists(ModelFolder)) {
            return ModelFolder;
        }
        Error("Could not find the Model Folder");
        return string.Empty;
    }
#>
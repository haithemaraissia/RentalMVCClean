@using System.Data.Entity
@using System.Globalization
@using System.Linq
@using RentalMobile.Helpers
@using System.Web.Mvc
@using RentalMobile.Model.Models
@using RentalModel.Repository.Generic.UnitofWork
@functions {
//TODO  TO COMPLETE SO THAT EVERYTHING IS USING DEPENDECY INJECTION


    public static string GetVideo()
    {
        var uri = HttpContext.Current.Request.Url;
        var videourl = uri.Scheme + Uri.SchemeDelimiter + uri.Host + ":" + uri.Port + "/Html/NoVideo.htm";
        try
        {
            if ((Model.Unit.YouTubeVideo != null && (bool)Model.Unit.YouTubeVideo))
            {
                videourl = HtmlHelperCustomExtensions.GetYouTubeVideoEmbeddedUrl(Model.Unit.YouTubeVideoURL.ToString(CultureInfo.InvariantCulture));
            }
            else if ((Model.Unit.VimeoVideo != null && (bool)Model.Unit.VimeoVideo))
            {
                videourl = HtmlHelperCustomExtensions.GeVimeoVideoEmbeddedUrl(Model.Unit.VimeoVideoURL.ToString(CultureInfo.InvariantCulture));
            }
        }
        catch (Exception)
        {
            videourl = uri.Scheme + Uri.SchemeDelimiter + uri.Host + ":" + uri.Port + "/Html/NoVideo.htm";
        }
        return videourl;
    }

    public static string GetPoserRole()
    {
        return Model.Unit.PosterRole != null ? Model.Unit.PosterRole.ToUpper() : "OWNER";

    }

    public static string GetPrimaryPhoto()
    {

        return String.IsNullOrEmpty(Model.Unit.PrimaryPhoto) ? "../../images/property/home7.png" : Model.Unit.PrimaryPhoto;

    }

    /// <summary>
    /// Functions for Specialist Coverage
    /// </summary>

    public static int Itemcount;

    public static bool CheckifAtLeastOnePropertyisTrue2(Type t)
    {
        var atleastoneAttribute = false;
        foreach (var value in t.GetProperties()
                               .Select(prop => prop.GetValue(Model.MaintenanceExterior, null))
                               .Where(value => value is bool && value.Equals(true)))
        {
            atleastoneAttribute = true;
        }
        return atleastoneAttribute;
    }

    public static bool CheckifAtLeastOnePropertyisTrue(object t)
    {
        return t.GetType().GetProperties()
                .Select(prop => prop.GetValue(t, null))
                .Any(value => value is bool && value.Equals(true));
    }

    private static new HtmlHelper<object> Html
    {
        get { return ((WebViewPage)CurrentPage).Html; }
    }

    private static UrlHelper Url
    {
        get { return ((WebViewPage)CurrentPage).Url; }
    }





}


@*    /// <summary>
    /// Begining Helper for Specialist Coverage
    /// </summary>
*@
@helper EmptyAttributesHtml()
{

    @SplitList()<li>No Coverage</li>
}
@helper NoTeamMemberHtml()
{

    @SplitList()<li>You have no team member</li><li>Add Team Member to Add / Remove Coverage</li>
}
}
@helper SplitingAttributesListHtml(int itemcount)
{
    if (itemcount != 5)
    {
        return;
    }
    const string newslisthtmlraw = @"<ul/></div><div class='six columns push by-one '><ul class='arrow'>";
    @Html.Raw(newslisthtmlraw)
    @ResetItemCount()
}
@helper SplitList()
{
    Itemcount++;
    @SplitingAttributesListHtml(Itemcount)
}
@helper  ResetItemCount()
{
    Itemcount = 0;
}
@*    /// <summary>
    /// End Helper for Specialist Coverage
    /// </summary>
*@ 